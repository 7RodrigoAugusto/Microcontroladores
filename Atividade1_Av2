;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;*              MODIFICACOES PARA USO COM 12F675                   *
;*                FEITAS PELO PROF. MARDSON                        *
;*                    FEVEREIRO DE 2016                            *
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;*                       NOME DO PROJETO                           *
;*                           CLIENTE                               *
;*         DESENVOLVIDO PELA MOSAICO ENGENHARIA E CONSULTORIA      *
;*   VERSAO: 1.0                           DATA: 17/06/03          *
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;*                     DESCRICAO DO ARQUIVO                        *
;*-----------------------------------------------------------------*
;*   MODELO PARA O PIC 12F675                                      *
;*                                                                 *
;*                                                                 *
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;*                     ARQUIVOS DE DEFINICAO                       *
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
#INCLUDE <P12F675.INC>	;ARQUIVO PADRAO MICROCHIP PARA 12F675

	__CONFIG _BODEN_OFF & _CP_OFF & _PWRTE_ON & _WDT_OFF & _MCLRE_ON & _INTRC_OSC_NOCLKOUT

;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;*                    PAGINACAO DE MEMORIA                         *
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

#DEFINE	BANK0	BCF STATUS,RP0	;SETA BANK 0 DE MEMORIA
#DEFINE	BANK1	BSF STATUS,RP0	;SETA BANK 1 DE MEMORIA

;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;*                         VARIAVEIS                               *
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
; DEFINICAO DOS NOMES E ENDEREÃ‡OS DE TODAS AS VARIAVEIS UTILIZADAS 
; PELO SISTEMA

	CBLOCK	0x20	;ENDERECO INICIAL DA MEMORIA DE
					;USUARIO
		W_TEMP		;REGISTRADORES TEMPORARIOS PARA USO
		STATUS_TEMP	;JUNTO AS INTERRUPCOES
		;NOVAS VARIAVEIS
		FLAG		;BIT 0 -> Interrupcao por overflow TMR0
				;BIT 1 -> Interrupcao por mudanca de botao

	ENDC			;FIM DO BLOCO DE MEMORIA
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;*                        FLAGS INTERNOS                           *
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
; DEFINICAO DE TODOS OS FLAGS UTILIZADOS PELO SISTEMA

;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;*                         CONSTANTES                              *
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
; DEFINICAO DE TODAS AS CONSTANTES UTILIZADAS PELO SISTEMA

;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;*                           ENTRADAS                              *
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

	#DEFINE BOTAO0	GPIO,0	;Entrada 1
	#DEFINE BOTAO1	GPIO,1	;Entrada 2
	#DEFINE BOTAO2	GPIO,2	;Entrada 3

;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;*                           SAIDA                               *
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
; DEFINICAO DE TODOS OS PINOS QUE SERAO UTILIZADOS COMO SAIDA
; RECOMENDAMOS TAMBEM COMENTAR O SIGNIFICADO DE SEUS ESTADOS (0 E 1)

	#DEFINE FREQUENCIA	GPIO,4	;Frequencia de saida

;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;*                       VETOR DE RESET                            *
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

	ORG	0x00			;ENDERECO INICIAL DE PROCESSAMENTO
	GOTO	INICIO
	
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;*                    INICIO DA INTERRUPCAO                        *
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

	ORG	0x04			;ENDERECO INICIAL DA INTERRUPCAO
	MOVWF	W_TEMP		;COPIA W PARA W_TEMP
	SWAPF	STATUS,W
	MOVWF	STATUS_TEMP	;COPIA STATUS PARA STATUS_TEMP

;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;*                    ROTINA DE INTERRUPCAO                        *
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

;Quando chegar na interrupcao modifica a flag que eu criei
;FLAG		
;BIT 0 -> Interrupcao por overflow TMR0
;BIT 1 -> Interrupcao por mudanca de botao
				
	;Toda vez que interromper eu checo qual interrupcao aconteceu, e seto a flag para a interrupcao
	BTFSC	INTCON,T0IF		;Checa se foi interrompido por overflow, BIT 2 em 1
	GOTO	INT_OVF	
	BTFSC	INTCON,GPIF		;Checa se foi interrompido por alteracao de botao, BIT 0 em 1
	GOTO	BOTAO_CHANGE
	GOTO	SAI_INT

INT_OVF
	;Dica
	;T0IF bit is set when TIMER0 rolls over. TIMER0 is unchanged on RESET and
	;should be initialized before clearing T0IF bit.
	MOVLW	.0	
	MOVWF	TMR0
	BSF	FLAG,0			;Seta minha flag
	BCF	INTCON,T0IF		;Limpa flag do INTCON
	GOTO	SAI_INT

BOTAO_CHANGE
	;Dica
	; Reading GPIO will end the mismatch condition and allow flag bit GPIF to be cleared.
	BCF	FREQUENCIA			
	BSF	FLAG,1			;Seta minha flag
	BCF	INTCON,GPIF		;Limpa flag de mudanca de botao
	GOTO	SAI_INT

	
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;*                 ROTINA DE SAIDA DA INTERRUPCAO                  *
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

SAI_INT
	SWAPF	STATUS_TEMP,W
	MOVWF	STATUS		;MOVE STATUS_TEMP PARA STATUS
	SWAPF	W_TEMP,F
	SWAPF	W_TEMP,W	;MOVE W_TEMP PARA W
	RETFIE

;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;*	            	 ROTINAS E SUBROTINAS                      *
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

LIMPA
	;Limpa tudo que eh crucial para o funcionamento da logica
	MOVLW	.0
	MOVWF	TMR0
	BCF	FREQUENCIA
	BCF	INTCON,GPIF		;Flag de mudanca de porta
	BCF	INTCON,T0IF		;Flag de overflow
	CLRF	FLAG
	RETURN


HZ_262
	;Fica preso em loop esperando ser interrompido e checando a flag que vai ser acionada dentro da interrupcao
	BTFSS	FLAG,0
	GOTO 	HZ_262
	BCF	FLAG,0
	RETURN

HZ_349	
	;Fica preso em loop esperando ser interrompido e checando a flag que vai ser acionada dentro da interrupcao
	BTFSS	FLAG,0
	GOTO 	HZ_349
	BCF	FLAG,0
	RETURN

HZ_440
	;Fica preso em loop esperando ser interrompido e checando a flag que vai ser acionada dentro da interrupcao
	BTFSS	FLAG,0
	GOTO 	HZ_440
	BCF	FLAG,0
	RETURN

HZ_523
	;Fica preso em loop esperando ser interrompido e checando a flag que vai ser acionada dentro da interrupcao
	BTFSS	FLAG,0
	GOTO 	HZ_523
	BCF	FLAG,0
	RETURN






;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;*                     INICIO DO PROGRAMA                          *
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
	
INICIO
	BANK1				;ALTERA PARA O BANCO 1
	MOVLW	B'00000111' 		;CONFIGURA TODAS AS PORTAS DO GPIO (PINOS)
					;GP0, GP1 E GP2 COMO ENTRADAS
	MOVWF	TRISIO		
	CLRF	ANSEL 			;DEFINE PORTAS COMO Digital I/O

	MOVLW	B'00000111'		;Utilizando o PRESCALER em 1:256 do TMR0
	MOVWF	OPTION_REG		;Configurando ele

	MOVLW	B'00000111'
	MOVWF	IOC

	MOVLW	B'11101000'		;HABILITO INTERRUPCAO PELO TMR0 BIT 5 TOIE
					;Habilito interrupcao pela mudanca de porta BIT3 GPIE
	MOVWF	INTCON			;DEFINE INTERRUPCAO

	BANK0				;RETORNA PARA O BANCO 0

	MOVLW	B'00000111'
	MOVWF	CMCON			;DEFINE O MODO DE OPERACAO DO COMPARADOR ANALOGICO

;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;*                     INICIALIZACAO DE VARIAVEIS                 *
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;*                     ROTINA PRINCIPAL                            *
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *


MAIN
	;Limpa flags
	CALL LIMPA

	;*Testa as portas que estao sendo utilizadas

	BTFSS	BOTAO0 					;Pula quando botao0 = 1
	GOTO	BOTAO0_0				;Chama low frequency, pois botao0 = 0
	BTFSS	BOTAO1 					;Pula quando botao1 = 1
	GOTO	BOTAO1_0_BOTAO0_1			;botao0 = 1 botao1 = 0
	GOTO	BOTAO1_1_BOTAO0_1			;botao0 = 1 botao1 = 1

BOTAO0_0
	;Automaticamente com essa disposicao, teremos o dispositivo se mantendo em low, sempre que nenhum botao esteja pressionado
	GOTO	F_LOW

BOTAO1_0_BOTAO0_1
	BTFSS	BOTAO2
	GOTO	F_262						;botao0 = 1 botao1 = 0 botao2 = 0
	GOTO	F_349						;botao0 = 1 botao1 = 0 botao2 = 1

BOTAO1_1_BOTAO0_1
	BTFSS	BOTAO2
	GOTO	F_440						;botao0 = 1 botao1 = 1 botao2 = 0
	GOTO	F_523						;botao0 = 1 botao1 = 1 botao2 = 1



;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;*                     CALCULO DA F
;*		1Hz = 1s
;*		F = 1/T, ou seja 
;*		262HZ = 1/T
;*
;*		T = 1/262 = 0,003816 segundos	3816 instrucoes	0xEE8
;*		T = 1/349 = 0,002865 segundos   2865 instrucoes	0xB31
;*		T = 1/440 = 0,002272 segundos 	2272 instrucoes 0x8E0
;*		T = 1/523 = 0,001912 segundos   1912 instrucoes	0x778
;*		Preciso passar esses valores para TMR0
;*	
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 


;Em cada uma das frequencias fica preso enquanto o botao nao seja alterado

F_LOW
	BCF		FREQUENCIA
	BTFSC	FLAG,1				;Se FLAG,1 = 1, a porta foi alterada, volta para o Main.
	GOTO	MAIN
	GOTO	F_LOW

;Com TMR0 = 241 consigo 3843
F_262
	;Utilizando TMR0 com prescaler de 1:256
	;Necessito do TMR0 comecando em 241
	MOVLW	.241
	MOVWF	TMR0

	BSF	FREQUENCIA
	CALL	HZ_262				;Chama o Loop da frequencia
	BTFSC	FLAG,1				;Se FLAG,1 = 1, a porta foi alterada, volta para o Main.
	GOTO	MAIN

	;FAZ EM "ZERO" COM A FREQUENCIA
	BCF	FREQUENCIA

	;Utilizando TMR0 com prescaler de 1:256
	;Necessito do TMR0 comecando em 241
	MOVLW	.241
	MOVWF	TMR0

	CALL	HZ_262				;Chama o Loop da frequencia
	BTFSC	FLAG,1				;Se FLAG,1 = 1, a porta foi alterada, volta para o Main.
	GOTO	MAIN
	GOTO	F_262


;FLAG		
;BIT 0 -> Interrupcao por overflow TMR0
;BIT 1 -> Interrupcao por mudanca de porta

;Com TMR0 = 245 consigo 2814
F_349
	
	;Utilizando TMR0 com prescaler de 1:256
	;Necessito do TMR0 comecando em 245
	MOVLW	.245
	MOVWF	TMR0

	BSF	FREQUENCIA
	CALL	HZ_349				;Chama o Loop da frequencia
	BTFSC	FLAG,1				;Se FLAG,1 = 1, a porta foi alterada, volta para o Main.
	GOTO	MAIN

	;FAZ EM "ZERO" COM A FREQUENCIA
	BCF		FREQUENCIA

	;Utilizando TMR0 com prescaler de 1:256
	;Necessito do TMR0 comecando em 245
	MOVLW	.245
	MOVWF	TMR0

	CALL	HZ_349				;Chama o Loop da frequencia
	BTFSC	FLAG,1				;Se FLAG,1 = 1, a porta foi alterada, volta para o Main.
	GOTO	MAIN
	GOTO	F_349


;FLAG		
;BIT 0 -> Interrupcao por overflow TMR0
;BIT 1 -> Interrupcao por mudanca de porta

;Com TMR0 = 247 consigo 2310
F_440

	;Utilizando TMR0 com prescaler de 1:256
	;Necessito do TMR0 comecando em 247
	MOVLW	.247
	MOVWF	TMR0

	BSF	FREQUENCIA
	CALL	HZ_440				;Chama o Loop da frequencia
	BTFSC	FLAG,1				;Se FLAG,1 = 1, a porta foi alterada, volta para o Main.
	GOTO	MAIN

	;FAZ EM "ZERO" COM A FREQUENCIA
	BCF	FREQUENCIA

	;Utilizando TMR0 com prescaler de 1:256
	;Necessito do TMR0 comecando em 247
	MOVLW	.247
	MOVWF	TMR0

	CALL	HZ_440				;Chama o Loop da frequencia
	BTFSC	FLAG,1				;Se FLAG,1 = 1, a porta foi alterada, volta para o Main.
	GOTO	MAIN
	GOTO	F_440


;FLAG		
;BIT 0 -> Interrupcao por overflow TMR0
;BIT 1 -> Interrupcao por mudanca de porta


;Com TMR0 = 248 consigo 2051 
F_523
	
	;Utilizando TMR0 com prescaler de 1:256
	;Necessito do TMR0 comecando em 248
	MOVLW	.248
	MOVWF	TMR0

	BSF	FREQUENCIA
	CALL	HZ_523				;Chama o Loop da frequencia
	BTFSC	FLAG,1				;Se FLAG,1 = 1, a porta foi alterada, volta para o Main.
	GOTO	MAIN

	;FAZ EM "ZERO" COM A FREQUENCIA
	BCF	FREQUENCIA

	;Utilizando TMR0 com prescaler de 1:256
	;Necessito do TMR0 comecando em 248
	MOVLW	.248
	MOVWF	TMR0

	CALL	HZ_523				;Chama o Loop da frequencia
	BTFSC	FLAG,1				;Se FLAG,1 = 1, a porta foi alterada, volta para o Main.
	GOTO	MAIN
	GOTO	F_523


;FLAG		
;BIT 0 -> Interrupcao por overflow TMR0
;BIT 1 -> Interrupcao por mudanca de porta


	GOTO MAIN
	

;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;*                       FIM DO PROGRAMA                           *
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

	END
